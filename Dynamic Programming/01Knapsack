int n	//total number of items
int l	//limit on weight of knapsack

int v[n] //value associated with items
int w[n] //weight associated with items

//Problem can be solved by taking a dp matrix of rows = no. of items ( + 1 ) and columns = (limit of knapsack + 1);
int dp[n+1][l+1];

for(int i=1; i<=n; i++) {
	for(int j=0; j<=l; j++) {
		if(w[i-1] <= l) {
			dp[i][j] = max( v[i-1]+dp[i-1][j-w[i-1]], dp[i-1][j]);
		}
		else {
			dp[i][j] = dp[i-1][j];
		}
	}
}

cout << dp[n-1][l-1];
